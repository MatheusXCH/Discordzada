import codecs
import os
import time
import asyncio

# Get the globals from Paths
import codes.paths as path
import discord
from pprint import pprint
from discord import Member, Role, User
from discord.ext import commands
from discord.ext.commands import Bot, MissingPermissions, guild_only, has_permissions
from discord.utils import get

# M√≥dulo: Management
#     - O presente m√≥dulo possui comandos de gerenciamento do servidor de forma abrangente
#     - Cont√©m fun√ß√µes de administrador (como Kick, Ban)
#     - Cont√©m um Listener respons√°vel por filtrar palavras indevidas no servidor
#     - Cont√©m fun√ß√µes para administrar roles (set e drop)
#     - Cont√©m o comando !clear, respons√°vel por limpar as mensagens do pr√≥prio PyBOT ou de algum membro da guilda


class Management(commands.Cog):
    """M√≥dulo contendo diversas fun√ß√µes de gerenciamento
    OBS: √â preciso ter permiss√£o para utilizar alguns dos comandos deste m√≥dulo
    """

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    def error_message(self, ctx: commands.Context, error):
        if isinstance(error, MissingPermissions):
            return f"Desculpe {ctx.author.mention}, voc√™ n√£o tem permiss√£o para fazer isso!"

    @commands.command(name="invite")
    async def invite(self, ctx: commands.Context):
        """!invite => Recebe um convite para o servidor na DM"""

        invitelink = await ctx.channel.create_invite(max_uses=1, unique=True, max_age=300)
        await ctx.author.send("Aqui est√° o seu convite para o servidor: ")
        await ctx.author.send(invitelink)

    @commands.command(name="nick")
    @has_permissions(manage_nicknames=True)
    async def nick(self, ctx: commands.Context, member: discord.Member, *, newnick=None):
        """!nick <@Member> <new_nick> => Troca o nick do 'Membro' para 'new_nick'
        - √â necess√°rio ter permiss√£o para trocar apelidos
        """
        if newnick is None:
            await member.edit(nick="")

        await member.edit(nick=newnick)
        await ctx.send(f"Apelido de **{member.name}** mudado para {member.mention} com sucesso!")

    @nick.error
    async def nick_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="kick")
    @has_permissions(manage_roles=True, kick_members=True)
    async def kick(self, ctx: commands.Context, member: Member):
        """!kick <@Member> => Expulsa um membro do servidor
        - √â necess√°rio ter permiss√£o para expulsar membros
        """

        await member.kick()
        await ctx.send(f"**{member.mention}** foi KICKADO pelo RH!")
        await ctx.send(file=discord.File(path.image_path + "RH.png"))

    @kick.error
    async def kick_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="ban")
    @has_permissions(ban_members=True)
    async def ban(self, ctx: commands.Context, member: Member):
        """!ban <@Member> => Bane um membro do servidor
        - √â necess√°rio ter permiss√£o para banir membros
        """

        await member.ban()
        await ctx.send(f"{member.mention} foi BANIDO pelo RH!")
        await ctx.send(file=discord.File(path.image_path + "RH.png"))

    @ban.error
    async def ban_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    # WORKING
    @commands.command(name="unban")
    @has_permissions(ban_members=True)
    async def unban(self, ctx: commands.Context):
        """!unban => Permite desbanir um usu√°rio da lista de banidos do servidor
        - √â necess√°rio permiss√£o para banir membros
        """

        def check(message):
            return message.author == ctx.author

        bans = await ctx.guild.bans()
        banned_users_list = [ban_tuple[1] for ban_tuple in bans]
        banned_users = [{"id": user.id, "name_tag": f"{user.name}#{user.discriminator}"} for user in banned_users_list]
        show_banneds = " | ".join([user["name_tag"] for user in banned_users])

        if not show_banneds:
            return await ctx.send(
                embed=discord.Embed(title="Usu√°rios banidos:", description="**N√£o h√° ningu√©m banido no servidor**")
            )

        await ctx.send(embed=discord.Embed(title="Usu√°rios banidos:", description=f"{show_banneds}"))
        await ctx.send("Informe quem deseja desbanir:")

        try:
            user_name_msg = await self.bot.wait_for("message", check=check, timeout=30)
            user_name = user_name_msg.content
        except asyncio.TimeoutError:
            await ctx.send(
                f"Desculpe {ctx.author.mention}, parece que voc√™ demorou demais para informar o que foi solicitado... üòÖ"
            )

        for item in banned_users:
            if user_name.upper() == item["name_tag"].upper():
                user = self.bot.get_user(int(item["id"]))
                await ctx.guild.unban(user)
                return await ctx.send(
                    f"O usu√°rio **{user.name}** foi desbanido üõ†\nAgora basta notific√°-lo da novidade via DM üòÅ"
                )

        await ctx.send(f"Parece que o usu√°rio **{user_name}** n√£o est√° banido no servidor ü§î")

    @unban.error
    async def unban_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="role")
    @has_permissions(manage_roles=True)
    async def get_role(self, ctx: commands.Context, member: Member):
        """!role <@Member> => Lista as roles de um membro da guilda
        - √â necess√°rio ter permiss√£o para gerenciar Roles
        """

        list_roles = []
        for role in range(1, len(member.roles)):
            list_roles.append(member.roles[role].name)

        list_roles = ", ".join(list_roles)

        await ctx.send(f"As roles de {member.mention} s√£o: {list_roles}")

    @get_role.error
    async def get_role_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="set-role")
    @has_permissions(manage_roles=True)
    async def set_role(self, ctx: commands.Context, member: Member, *, role: Role):
        """!set-role <@Member> <Role> => Troca a role de um membro
        - √â necess√°rio ter permiss√£o de administrador
        """

        await member.add_roles(role)
        await ctx.send(f"A role de {member.mention} foi definida como: {role.name}")

    @set_role.error
    async def set_role_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="drop-role")
    @has_permissions(manage_roles=True)
    async def drop_role(self, ctx: commands.Context, member: Member, *, role: Role):
        """!drop-role => Retira uma role de um membro
        - √â necess√°rio ter permiss√£o de administrador
        """

        await member.remove_roles(role)
        await ctx.send(f'A role "{role.name}" de {member.mention} foi retirada!')

    @drop_role.error
    async def drop_role_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="perms", hidden=True)
    async def permissions(self, ctx: commands.Context, member: Member = None):
        """!perms [@Member]* => Retorna as permiss√µes de um membro
        - As permiss√µes de outros membros est√£o dispon√≠veis apenas para aqueles que podem gerir Roles
        """

        if member is not None:
            permissions = ctx.author.permissions_in(ctx.channel)
            if not permissions.manage_roles:
                return await ctx.send(
                    f"Desculpe {ctx.author.mention}, voc√™ n√£o pode ver a permiss√£o de outros usu√°rios"
                )

        if member is None:
            member = ctx.author

        roles = member.roles
        permissions_set = set()
        for role in roles:
            role_perms = [perm[0] for perm in role.permissions if perm[1]]
            for perm in role_perms:
                permissions_set.add(perm)

        permissions_list = sorted(list(permissions_set))
        permissions = "\n‚ñ´".join(permissions_list).title()
        await ctx.author.send(
            f"**SOLICITA√á√ÉO ATENDIDA!**\n__**{member.display_name}**__ tem as seguintes permiss√µes na guilda **{ctx.guild.name}:**\n"
            f"‚ñ´{permissions}"
        )

    @commands.command(name="clear")
    @has_permissions(manage_messages=True, send_messages=True)
    async def clear(self, ctx: commands.Context, number=5, member: Member = None):
        """!clear [num] [@Member] => Limpa as √∫ltimas [num] mensagens do usu√°rio [@Member] no chat
        - [num] e [@Member] s√£o opcionais, de modo que:\\
            !clear => Limpa 5 mensagens do bot\\
            !clear [num] => Limpa [num] mensagens do bot\\
            !clear [num] [@Member] => Limpa [num] mensagens de [@Member]
        """
        await ctx.message.delete()
        success = 0

        # Verifica se o Member foi passado, caso n√£o, escolhe o BOT como default
        if member is None:
            member = self.bot.user

        async for msg in ctx.message.channel.history(limit=100):
            if msg.author.id == member.id:
                number -= 1
                try:
                    await msg.delete()
                    success += 1
                except Exception:
                    pass

                if number == 0:
                    break

        embed = discord.Embed(title=f"‚ôª Foram limpas {success} mensagens!")
        msg = await ctx.send(embed=embed)
        time.sleep(3)
        await msg.delete()

    @clear.error
    async def clear_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="clean")
    @has_permissions(manage_messages=True, send_messages=True)
    async def clean(self, ctx: commands.Context, limit: int = 100):
        """!clean [limit] => Avalia as √∫ltimas [limit] mensagens e deleta todas que foram enviadas pelo bot
        - O atribuito [limit] √© opcional e, por padr√£o, est√° definido como limit=100.
        """

        def check(message):
            return message.author == self.bot.user

        await ctx.message.delete()
        deleted = await ctx.channel.purge(limit=limit, check=check)
        msg = await ctx.send(
            embed=discord.Embed(
                title=f"‚ôª Foram limpas {len(deleted)} mensagens de {ctx.guild.get_member(self.bot.user.id).nick}!"
            )
        )
        await asyncio.sleep(5)
        await msg.delete()

    @clean.error
    async def clean_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))

    @commands.command(name="purge")
    @has_permissions(administrator=True)
    async def channel_purge(self, ctx: commands.Context, limit: int = 20):
        """!purge [limit] => Deleta as √∫ltimas [limit] mensagens do canal, independente de quem as tenha enviado. Admin Only
        - O atributo [limit] √© opcioanl e, por padr√£o, est√° definido como limit=20. Apenas Administradores podem utilizar este comando.
        """

        await ctx.message.delete()
        deleted = await ctx.channel.purge(limit=limit)
        msg = await ctx.send(
            embed=discord.Embed(
                title=f"‚ôª As √∫ltimas {len(deleted)} mensagens do canal {ctx.channel.name} foram limpas!"
            )
        )
        await asyncio.sleep(5)
        await msg.delete()

    @channel_purge.error
    async def channel_purge_error(self, ctx: commands.Context, error):
        await ctx.send(self.error_message(ctx, error))


def setup(bot):
    bot.add_cog(Management(bot))
